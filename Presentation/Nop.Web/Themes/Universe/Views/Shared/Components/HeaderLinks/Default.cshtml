@model HeaderLinksModel
@using System.Text.Encodings.Web

<div class="icons-section pad-top20">
    <ul>
        <li class="hidden-xs login-box-man">
            <button href="#" class="mini-cart-icon"><i class="fa fa-user " aria-hidden="true"></i></button>
            <div class="login-section">
                <ul class="pad-10">
                    <li><a href="/wishlist">@T("admin.configuration.settings.shoppingcart.blocktitle.wishlist")</a></li>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
                    @if (Model.IsAuthenticated)
                    {
                        <li>
                            <a href="@Url.RouteUrl("CustomerInfo")" @*class="ico-register tagAHover" *@>@*<i class="fas fa-user"></i>*@ @T("Account.MyAccount")</a>
                        </li>
                        <li>
                            <a href="@Url.RouteUrl("Logout")" @*class="ico-logout tagAHover" *@>@*<i class="fas fa-sign-out-alt"></i>*@  @T("Account.Logout")</a>
                        </li>
                    }
                    else
                    {
                        <li>
                            <a href="@Url.RouteUrl("Register")" @*class="ico-register tagAHover" *@>@T("Account.Register")</a>
                        </li>
                        <li>
                            <a href="@Url.RouteUrl("Login")" @*class="ico-login tagAHover" *@>@T("Account.Login")</a>
                        </li>
                    }
                </ul>
            </div>
        </li>

        @*@if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">@T("PrivateMessages.Inbox")</a>
                <span class="qty inbox-qty">@Model.UnreadPrivateMessages</span>
            </li>
            if (!string.IsNullOrEmpty(Model.AlertMessage))
            {
                //new private message notification
                <script type="text/javascript" asp-location="Footer">
                    $(document).ready(function () {
                        displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
                    });
                </script>
            }
        }
        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">@T("Wishlist")</a>
                <span class="qty wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
            </li>
        }*@
        
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
    </ul>
</div>
@if (Model.ShoppingCartEnabled)
{
    <script asp-location="Footer">
        $(document).ready(function () {
            $('.header').on('mouseenter', '#topcartlink', function () {
                $('#flyout-cart').addClass('active');
            });
            $('.header').on('mouseleave', '#topcartlink', function () {
                $('#flyout-cart').removeClass('active');
            });
            $('.header').on('mouseenter', '#flyout-cart', function () {
                $('#flyout-cart').addClass('active');
            });
            $('.header').on('mouseleave', '#flyout-cart', function () {
                $('#flyout-cart').removeClass('active');
            });
        });
    </script>
}
